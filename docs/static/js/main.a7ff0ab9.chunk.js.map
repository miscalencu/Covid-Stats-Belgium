{"version":3,"sources":["components/common/pageLink.jsx","components/common/notFound.jsx","components/common/pageRedirect.jsx","components/Home.jsx","scripts/data.js","components/CasesDateAgeSexProvince.jsx","components/CasesDateMunicipality.jsx","components/CasesDateMunicipalityCum.jsx","components/Hospitalisations.jsx","components/Mortality.jsx","components/Tests.jsx","App.js","serviceWorker.js","index.js"],"names":["PageLink","params","className","href","process","to","children","NotFound","PageRedirect","url","document","location","CasesDateAgeSexProvince","target","taget","get","options","feedback","console","error","total","filter","filterObj","Object","keys","forEach","key","push","value","encodeURIComponent","indexOf","JSON","stringify","fetch","then","response","json","arr","sortBy","sortDir","data","orderBy","orderDir","sort","a","b","aVal","bVal","val","pageNr","pageSize","_filter","offset","paginatedItems","slice","pages","Math","ceil","length","catch","useState","loading","gridProps","setGridProps","regions","setRegions","provinces","setProvinces","ageGroups","setAgeGroups","sexes","setSexes","filterProvince","setFilterProvince","filterRegion","setFilterRegion","filterStartDate","setFilterStartDate","filterEndDate","setFilterEndDate","filterAgeGroup","setFilterAgeGroup","filterSex","setFilterSex","loadData","assign","_data","startDate","moment","format","endDate","region","province","ageGroup","sex","count","dataCount","emptyPlaceholder","useEffect","Form","Row","Col","selectsStart","placeholderText","selected","onChange","date","dateFormat","isClearable","selectsEnd","Control","as","placeholder","e","map","item","skin","onStateChange","newState","sortable","header","field","CasesDateMunicipality","language","setLanguage","districts","setDistricts","cities","setCities","filterDistrict","setFilterDistrict","filterCity","setFilterCity","lang","district","city","width","alt","title","src","onClick","style","cursor","CasesDateMunicipalityCum","Hospitalisations","md","Mortality","App","Container","Navbar","bg","variant","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","icon","faUsers","faMapMarked","Divider","faMap","faUserNurse","faSkullCrossbones","faVial","inline","hidden","FormControl","type","Button","path","exact","component","Home","Tests","Boolean","window","hostname","match","Router","HashRouter","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a7ff0ab9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PageLink = (params) => {\r\n    // use this way of generating the links for the HashRouter\r\n    // the default implementatin has a bug if the react app is inside a virtual folder\r\n    // in this case it also adds the folder name after the hash (#).\r\n    \r\n    const useHash = process.env.REACT_APP_ROUTER_TYPE === \"hash\";\r\n    return (\r\n        <>\r\n            {useHash && <a className={params.className} href={`${process.env.PUBLIC_URL}/#${params.to}`}>{params.children}</a>}\r\n            {!useHash && <Link to={params.to}>{params.children}</Link>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PageLink;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <>\r\n      <h1>404 - Page Not Found</h1>\r\n      <div>\r\n        <Link to='/'>Go Home</Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst PageRedirect = (params) => {\r\n    // use this way of redirecting for the HashRouter\r\n    // the default implementatin has a bug if the react app is inside a virtual folder\r\n    // in this case it also adds the folder name after the hash (#).\r\n    \r\n    const useHash = process.env.REACT_APP_ROUTER_TYPE === \"hash\";\r\n    if(useHash) {\r\n         const url = `${process.env.PUBLIC_URL}/#${params.to}`;\r\n         document.location.href = url;\r\n         return null; \r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!useHash && <Redirect to={params.to}></Redirect>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PageRedirect;","import React from 'react';\r\n\r\nconst CasesDateAgeSexProvince = () => {\r\n\r\n    return (\r\n        <>\r\n            <h1>Welcome</h1>\r\n            <p>This is a mini React/.Net Core WebAPI website to visually display the official Belgium Covid-19 data.</p>   \r\n            <p>Source of data: <a href=\"https://epistat.wiv-isp.be/Covid/\" target=\"_balnk\">https://epistat.wiv-isp.be/Covid/</a></p>\r\n            <p>Source code: <a href=\"https://github.com/miscalencu/Covid-Stats-Belgium\" taget=\"_blank\">https://github.com/miscalencu/Covid-Stats-Belgium</a></p>\r\n            <p>Use the top menu to see different reports.</p>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default CasesDateAgeSexProvince;","function get(options, feedback) {\r\n    options = options || {};\r\n    feedback = feedback || (() => {});\r\n    \r\n    if(!options.url) {\r\n        console.error('_data.get: missing Url');\r\n    }\r\n\r\n    let total = null;\r\n\r\n    let url = options.url;\r\n    if(options.filter) {\r\n        let filterObj = [];\r\n        Object.keys(options.filter).forEach(key => {\r\n            filterObj.push({\r\n                key: key,\r\n                value: encodeURIComponent(options.filter[key])\r\n            })\r\n        });\r\n        url += (url.indexOf('?') === -1) ? `?` : `&`;\r\n        url += `filterStr=${JSON.stringify(filterObj)}`;\r\n    }\r\n\r\n    fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            let data = response.data ? response.data : response;\r\n            if(options.orderBy && options.orderDir) {\r\n                data = sort(data, options.orderBy, options.orderDir)\r\n            }\r\n\r\n            if(options.pageNr && options.pageSize) {\r\n                let _filter = filter(data, options.pageNr, options.pageSize);\r\n                data = _filter.data;\r\n                total = _filter.total;\r\n            }\r\n\r\n            feedback(data, total);\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error:', error);\r\n        });\r\n    }\r\n\r\nfunction sort(arr, sortBy, sortDir) {\r\n    return arr.sort((a, b) => {\r\n        let aVal = a[sortBy] ? a[sortBy] : \"-\";\r\n        let bVal = b[sortBy] ? b[sortBy] : \"-\";\r\n\r\n        let val = 0;\r\n        if (aVal > bVal)\r\n            val = (sortDir === \"ASC\") ? 1 : -1;\r\n        if (aVal < bVal)\r\n            val = (sortDir === \"ASC\") ? -1 : 1;\r\n\r\n        return val;\r\n    });\r\n}\r\n\r\nfunction filter(arr, pageNr, pageSize) {\r\n    let offset = (pageNr - 1) * pageSize;\r\n    let paginatedItems = arr.slice(offset).slice(0, pageSize);\r\n    let pages = Math.ceil(arr.length / pageSize);\r\n    return {\r\n        total: arr.length,\r\n        pages: pages,\r\n        data: paginatedItems\r\n    };\r\n}\r\n\r\nexport { \r\n    get    \r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Column } from 'react-digital-grid';\r\nimport { Form, Col } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { _data } from './../scripts/all';\r\nimport moment from 'moment';\r\n\r\nconst CasesDateAgeSexProvince = () => {\r\n\r\n    const[ gridProps, setGridProps ] = useState({ \r\n        data: [],\r\n        loading: true,\r\n        pageNr: 1,\r\n        pageSize: 10,\r\n        orderBy: 'date',\r\n        orderDir: 'DESC'\r\n    });\r\n\r\n    // filter data\r\n    const [ regions, setRegions ] = useState([]);\r\n    const [ provinces, setProvinces ] = useState([]);\r\n    const [ ageGroups, setAgeGroups ] = useState([]);\r\n    const [ sexes, setSexes ] = useState([]);\r\n    \r\n    // filter values\r\n    const [ filterProvince, setFilterProvince] = useState([\"ALL\"]);\r\n    const [ filterRegion, setFilterRegion] = useState([\"ALL\"])\r\n    const [ filterStartDate, setFilterStartDate ] = useState(\"\");\r\n    const [ filterEndDate, setFilterEndDate ] = useState(\"\");\r\n    const [ filterAgeGroup, setFilterAgeGroup ] = useState(\"ALL\");\r\n    const [ filterSex, setFilterSex ] = useState(\"ALL\");\r\n\r\n    const loadData = (pageSize, pageNr, orderBy, orderDir) => {\r\n        setGridProps(Object.assign(gridProps, { loading: true }));\r\n        _data.get(\r\n        {\r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetCasesDateASP`,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            filter: {\r\n                startDate: filterStartDate ? new moment(filterStartDate).format('YYYY-MM-DD') : '',\r\n                endDate: filterEndDate ? new moment(filterEndDate).format('YYYY-MM-DD') : '',\r\n                region: filterRegion,\r\n                province: filterProvince,\r\n                ageGroup: filterAgeGroup,\r\n                sex: filterSex\r\n            },\r\n        }, (data, count) => {\r\n          setGridProps({\r\n            loading: false,\r\n            data: data,\r\n            dataCount: count,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            emptyPlaceholder: '-'\r\n          })\r\n        });\r\n      }\r\n    \r\n\r\n    useEffect(() => {\r\n        // set filter items\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateASP&field=region` }, (data) => setRegions(data));\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateASP&field=ageGroup` }, (data) => setAgeGroups(data));\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateASP&field=sex` }, (data) => setSexes(data));\r\n\r\n        loadData(gridProps.pageSize, gridProps.pageNr, gridProps.orderBy, gridProps.orderDir);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterStartDate, filterEndDate, filterRegion, filterProvince, filterAgeGroup, filterSex ]);\r\n\r\n    useEffect(() => {\r\n        // set filter items\r\n        _data.get({ \r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateASP&field=province&re=${filterRegion}` \r\n        }, (data) => setProvinces(data))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterRegion ]);        \r\n\r\n    return (\r\n        <>\r\n            <h1>Confirmed Cases - by Date, Age, Sex and Province</h1>\r\n            <Form className=\"mb-3\">\r\n                <Form.Row>\r\n                    <Col>\r\n                        <DatePicker\r\n                            selectsStart\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"From Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterStartDate}\r\n                            onChange={date => setFilterStartDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                    <DatePicker\r\n                            selectsEnd\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"To Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterEndDate}\r\n                            onChange={date => setFilterEndDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Region\"\r\n                            onChange={(e) => { setFilterRegion(e.target.value); setFilterProvince(\"ALL\"); }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Region</Form.Control>\r\n                            {\r\n                                regions.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Province\"\r\n                            onChange={(e) => setFilterProvince(e.target.value)}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Province</Form.Control>\r\n                            {\r\n                                provinces.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>                        \r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Age Group\"\r\n                            onChange={(e) => setFilterAgeGroup(e.target.value)}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Age Group</Form.Control>\r\n                            {\r\n                                ageGroups.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                    <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Sex\"\r\n                            onChange={(e) => setFilterSex(e.target.value)}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Sex</Form.Control>\r\n                            {\r\n                                sexes.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Grid \r\n                { ...gridProps }\r\n                skin='bootstrap'\r\n                onStateChange={newState =>\r\n                    loadData(newState.pageSize, newState.pageNr, newState.orderBy, newState.orderDir)\r\n                }\r\n                > \r\n                <Column sortable header='Date' className='italic' field='date' />\r\n                <Column sortable header='Region' className='center bold' field='region' />\r\n                <Column sortable header='Province' className='center bold' field='province' />\r\n                <Column sortable header='Age' className='center' field='agegroup' />\r\n                <Column sortable header='Sex' className='center' field='sex' />\r\n                <Column sortable header='Cases' className='center' field='cases' />\r\n            </Grid>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default CasesDateAgeSexProvince;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Column } from 'react-digital-grid';\r\nimport { Form, Col } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { _data } from '../scripts/all';\r\nimport moment from 'moment';\r\n\r\nconst CasesDateMunicipality = () => {\r\n\r\n    const[ gridProps, setGridProps ] = useState({ \r\n        data: [],\r\n        loading: true,\r\n        pageNr: 1,\r\n        pageSize: 10,\r\n        orderBy: 'date',\r\n        orderDir: 'DESC'\r\n    });\r\n\r\n    // filter data\r\n    const [ language, setLanguage ] = useState('FR');\r\n    const [ regions, setRegions ] = useState([]);\r\n    const [ provinces, setProvinces ] = useState([]);\r\n    const [ districts, setDistricts ] = useState([]);\r\n    const [ cities, setCities ] = useState([]);\r\n    \r\n    // filter values\r\n    const [ filterStartDate, setFilterStartDate ] = useState(\"\");\r\n    const [ filterEndDate, setFilterEndDate ] = useState(\"\");\r\n    const [ filterProvince, setFilterProvince] = useState([\"ALL\"]);\r\n    const [ filterRegion, setFilterRegion] = useState([\"ALL\"])\r\n    const [ filterDistrict, setFilterDistrict ] = useState(\"ALL\");\r\n    const [ filterCity, setFilterCity ] = useState(\"ALL\");\r\n\r\n    const loadData = (pageSize, pageNr, orderBy, orderDir) => {\r\n        setGridProps(Object.assign(gridProps, { loading: true }));\r\n        _data.get(\r\n        {\r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetCasesDateM`,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            filter: {\r\n                lang: language,\r\n                startDate: filterStartDate ? new moment(filterStartDate).format('YYYY-MM-DD') : '',\r\n                endDate: filterEndDate ? new moment(filterEndDate).format('YYYY-MM-DD') : '',\r\n                region: filterRegion,\r\n                province: filterProvince,\r\n                district: filterDistrict,\r\n                city: filterCity\r\n            },\r\n        }, (data, count) => {\r\n          setGridProps({\r\n            loading: false,\r\n            data: data,\r\n            dataCount: count,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            emptyPlaceholder: '-'\r\n          })\r\n        });\r\n      }\r\n    \r\n\r\n    useEffect(() => {\r\n        // set filter items\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateM&lang=${language}&field=region` }, (data) => setRegions(data));\r\n        \r\n        loadData(gridProps.pageSize, gridProps.pageNr, gridProps.orderBy, gridProps.orderDir);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ language, filterStartDate, filterEndDate, filterRegion, filterProvince, filterDistrict, filterCity ]);\r\n\r\n    useEffect(() => {\r\n        _data.get({ \r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateM&lang=${language}&field=province&re=${filterRegion}` \r\n        }, (data) => setProvinces(data))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterRegion ]);        \r\n\r\n    useEffect(() => {\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateM&lang=${language}&field=district&re=${filterRegion}|${filterProvince}` }, (data) => setDistricts(data));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterRegion, filterProvince ]);       \r\n\r\n    useEffect(() => {\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateM&lang=${language}&field=city&re=${filterRegion}|${filterProvince}|${filterDistrict}` }, (data) => setCities(data));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterRegion, filterProvince, filterDistrict ]);   \r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                <img \r\n                    width = \"24\"\r\n                    alt = {`Flag`}\r\n                    title = {`Current language: ${language}. Click to change!`}\r\n                    src={ `images/${language}_flag.png` }\r\n                    onClick={(e) => { \r\n                        setLanguage(language === \"FR\" ? \"NL\" : \"FR\");\r\n                        setFilterRegion('ALL');\r\n                        setFilterProvince('ALL');\r\n                        setFilterDistrict('ALL');\r\n                        setFilterCity('ALL');\r\n                    }}\r\n                    style={{ cursor: \"pointer\" }}\r\n                    className=\"mx-2 my-2\"\r\n                />\r\n                Confirmed Cases - by Date and Municipality:\r\n            </h1>\r\n            <Form className=\"mb-3\">\r\n                <Form.Row>\r\n                    <Col>\r\n                        <DatePicker\r\n                            selectsStart\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"From Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterStartDate}\r\n                            onChange={date => setFilterStartDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                    <DatePicker\r\n                            selectsEnd\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"To Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterEndDate}\r\n                            onChange={date => setFilterEndDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Region\"\r\n                            onChange={(e) => { \r\n                                setFilterRegion(e.target.value); \r\n                                setFilterProvince(\"ALL\"); \r\n                                setFilterDistrict('ALL');\r\n                                setFilterCity('ALL');                                \r\n                                }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Region</Form.Control>\r\n                            {\r\n                                regions.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Province\"\r\n                            onChange={(e) => { \r\n                                setFilterProvince(e.target.value); \r\n                                setFilterDistrict('ALL');\r\n                                setFilterCity('ALL');                                \r\n                                }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Province</Form.Control>\r\n                            {\r\n                                provinces.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>                        \r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"District\"\r\n                            onChange={(e) => { \r\n                                setFilterDistrict(e.target.value); \r\n                                setFilterCity('ALL');                                \r\n                                }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">District</Form.Control>\r\n                            {\r\n                                districts.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                    <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"City\"\r\n                            onChange={(e) => setFilterCity(e.target.value)}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">City</Form.Control>\r\n                            {\r\n                                cities.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Grid \r\n                { ...gridProps }\r\n                skin='bootstrap'\r\n                onStateChange={newState =>\r\n                    loadData(newState.pageSize, newState.pageNr, newState.orderBy, newState.orderDir)\r\n                }\r\n                > \r\n                <Column sortable header='Date' className='bold' field='date' />\r\n                <Column sortable header='NIS5' className='center bold' field='niS5' />\r\n                <Column sortable header='Region' field={`tX_RGN_DESCR_${language}`} />\r\n                <Column sortable header='Province' field={`tX_PROV_DESCR_${language}`} />\r\n                <Column sortable header='District' field={`tX_ADM_DSTR_DESCR_${language}`} />\r\n                <Column sortable header='City' field={`tX_DESCR_${language}`} />\r\n                <Column sortable header='Cases' className='center bold' field='cases' />\r\n            </Grid>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default CasesDateMunicipality;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Column } from 'react-digital-grid';\r\nimport { Form, Col } from 'react-bootstrap';\r\nimport { _data } from '../scripts/all';\r\n\r\nconst CasesDateMunicipalityCum = () => {\r\n\r\n    const[ gridProps, setGridProps ] = useState({ \r\n        data: [],\r\n        loading: true,\r\n        pageNr: 1,\r\n        pageSize: 10,\r\n        orderBy: 'date',\r\n        orderDir: 'DESC'\r\n    });\r\n\r\n    // filter data\r\n    const [ language, setLanguage ] = useState('FR');\r\n    const [ regions, setRegions ] = useState([]);\r\n    const [ provinces, setProvinces ] = useState([]);\r\n    const [ districts, setDistricts ] = useState([]);\r\n    const [ cities, setCities ] = useState([]);\r\n    \r\n    // filter values\r\n    const [ filterProvince, setFilterProvince] = useState([\"ALL\"]);\r\n    const [ filterRegion, setFilterRegion] = useState([\"ALL\"])\r\n    const [ filterDistrict, setFilterDistrict ] = useState(\"ALL\");\r\n    const [ filterCity, setFilterCity ] = useState(\"ALL\");\r\n\r\n    const loadData = (pageSize, pageNr, orderBy, orderDir) => {\r\n        setGridProps(Object.assign(gridProps, { loading: true }));\r\n        _data.get(\r\n        {\r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetCasesDateMCum`,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            filter: {\r\n                lang: language,\r\n                region: filterRegion,\r\n                province: filterProvince,\r\n                district: filterDistrict,\r\n                city: filterCity\r\n            },\r\n        }, (data, count) => {\r\n          setGridProps({\r\n            loading: false,\r\n            data: data,\r\n            dataCount: count,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            emptyPlaceholder: '-'\r\n          })\r\n        });\r\n      }\r\n    \r\n\r\n    useEffect(() => {\r\n        // set filter items\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateCumM&lang=${language}&field=region` }, (data) => setRegions(data));\r\n        \r\n        loadData(gridProps.pageSize, gridProps.pageNr, gridProps.orderBy, gridProps.orderDir);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ language, filterRegion, filterProvince, filterDistrict, filterCity ]);\r\n\r\n    useEffect(() => {\r\n        _data.get({ \r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateCumM&lang=${language}&field=province&re=${filterRegion}` \r\n        }, (data) => setProvinces(data))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterRegion ]);        \r\n\r\n    useEffect(() => {\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateCumM&lang=${language}&field=district&re=${filterRegion}|${filterProvince}` }, (data) => setDistricts(data));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterRegion, filterProvince ]);       \r\n\r\n    useEffect(() => {\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateCumM&lang=${language}&field=city&re=${filterRegion}|${filterProvince}|${filterDistrict}` }, (data) => setCities(data));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterRegion, filterProvince, filterDistrict ]);   \r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                <img \r\n                    width = \"24\"\r\n                    alt = {`Flag`}\r\n                    title = {`Current language: ${language}. Click to change!`}\r\n                    src={ `images/${language}_flag.png` }\r\n                    onClick={(e) => { \r\n                        setLanguage(language === \"FR\" ? \"NL\" : \"FR\");\r\n                        setFilterRegion('ALL');\r\n                        setFilterProvince('ALL');\r\n                        setFilterDistrict('ALL');\r\n                        setFilterCity('ALL');\r\n                    }}\r\n                    style={{ cursor: \"pointer\" }}\r\n                    className=\"mx-2 my-2\"\r\n                />\r\n                Confirmed Cases - Cumulative Number by Municipality:\r\n            </h1>\r\n            <Form className=\"mb-3\">\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Region\"\r\n                            onChange={(e) => { \r\n                                setFilterRegion(e.target.value); \r\n                                setFilterProvince(\"ALL\"); \r\n                                setFilterDistrict('ALL');\r\n                                setFilterCity('ALL');                                \r\n                                }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Region</Form.Control>\r\n                            {\r\n                                regions.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Province\"\r\n                            onChange={(e) => { \r\n                                setFilterProvince(e.target.value); \r\n                                setFilterDistrict('ALL');\r\n                                setFilterCity('ALL');                                \r\n                                }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Province</Form.Control>\r\n                            {\r\n                                provinces.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>                        \r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"District\"\r\n                            onChange={(e) => { \r\n                                setFilterDistrict(e.target.value); \r\n                                setFilterCity('ALL');                                \r\n                                }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">District</Form.Control>\r\n                            {\r\n                                districts.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                    <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"City\"\r\n                            onChange={(e) => setFilterCity(e.target.value)}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">City</Form.Control>\r\n                            {\r\n                                cities.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Grid \r\n                { ...gridProps }\r\n                skin='bootstrap'\r\n                onStateChange={newState =>\r\n                    loadData(newState.pageSize, newState.pageNr, newState.orderBy, newState.orderDir)\r\n                }\r\n                > \r\n                <Column sortable header='NIS5' className='center bold' field='niS5' />\r\n                <Column sortable header='Region' field={`tX_RGN_DESCR_${language}`} />\r\n                <Column sortable header='Province' field={`tX_PROV_DESCR_${language}`} />\r\n                <Column sortable header='District' field={`tX_ADM_DSTR_DESCR_${language}`} />\r\n                <Column sortable header='City' field={`tX_DESCR_${language}`} />\r\n                <Column sortable header='Cases' className='center bold' field='cases' />\r\n            </Grid>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default CasesDateMunicipalityCum;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Column } from 'react-digital-grid';\r\nimport { Form, Col } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { _data } from '../scripts/all';\r\nimport moment from 'moment';\r\n\r\nconst Hospitalisations = () => {\r\n\r\n    const[ gridProps, setGridProps ] = useState({ \r\n        data: [],\r\n        loading: true,\r\n        pageNr: 1,\r\n        pageSize: 10,\r\n        orderBy: 'date',\r\n        orderDir: 'DESC'\r\n    });\r\n\r\n    // filter data\r\n    const [ regions, setRegions ] = useState([]);\r\n    const [ provinces, setProvinces ] = useState([]);\r\n    \r\n    // filter values\r\n    const [ filterProvince, setFilterProvince] = useState([\"ALL\"]);\r\n    const [ filterRegion, setFilterRegion] = useState([\"ALL\"])\r\n    const [ filterStartDate, setFilterStartDate ] = useState(\"\");\r\n    const [ filterEndDate, setFilterEndDate ] = useState(\"\");\r\n\r\n    const loadData = (pageSize, pageNr, orderBy, orderDir) => {\r\n        setGridProps(Object.assign(gridProps, { loading: true }));\r\n        _data.get(\r\n        {\r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetCasesDateHosp`,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            filter: {\r\n                startDate: filterStartDate ? new moment(filterStartDate).format('YYYY-MM-DD') : '',\r\n                endDate: filterEndDate ? new moment(filterEndDate).format('YYYY-MM-DD') : '',\r\n                region: filterRegion,\r\n                province: filterProvince\r\n            },\r\n        }, (data, count) => {\r\n          setGridProps({\r\n            loading: false,\r\n            data: data,\r\n            dataCount: count,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            emptyPlaceholder: '-'\r\n          })\r\n        });\r\n      }\r\n    \r\n\r\n    useEffect(() => {\r\n        // set filter items\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateHosp&field=region` }, (data) => setRegions(data));\r\n        \r\n        loadData(gridProps.pageSize, gridProps.pageNr, gridProps.orderBy, gridProps.orderDir);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterStartDate, filterEndDate, filterRegion, filterProvince ]);\r\n\r\n    useEffect(() => {\r\n        // set filter items\r\n        _data.get({ \r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateASP&field=province&re=${filterRegion}` \r\n        }, (data) => setProvinces(data))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterRegion ]);        \r\n\r\n    return (\r\n        <>\r\n            <h1>Confirmed Cases - Hospitalisations</h1>\r\n            <Form className=\"mb-3\">\r\n                <Form.Row>\r\n                    <Col>\r\n                        <DatePicker\r\n                            selectsStart\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"From Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterStartDate}\r\n                            onChange={date => setFilterStartDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                    <DatePicker\r\n                            selectsEnd\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"To Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterEndDate}\r\n                            onChange={date => setFilterEndDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Region\"\r\n                            onChange={(e) => { setFilterRegion(e.target.value); setFilterProvince(\"ALL\"); }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Region</Form.Control>\r\n                            {\r\n                                regions.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Province\"\r\n                            onChange={(e) => setFilterProvince(e.target.value)}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Province</Form.Control>\r\n                            {\r\n                                provinces.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>                        \r\n                    </Col>\r\n                    <Col md={4}></Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Grid \r\n                { ...gridProps }\r\n                skin='bootstrap'\r\n                onStateChange={newState =>\r\n                    loadData(newState.pageSize, newState.pageNr, newState.orderBy, newState.orderDir)\r\n                }\r\n                > \r\n                <Column sortable header='Date' className='italic' field='date' />\r\n                <Column sortable header='Region' className='center bold' field='region' />\r\n                <Column sortable header='Province' className='center bold' field='province' />\r\n                <Column sortable header='Reporting' className='center' field='nR_REPORTING' />\r\n                <Column sortable header='IN' className='center' field='totaL_IN' />\r\n                <Column sortable header='ICU' className='center' field='totaL_IN_ICU' />\r\n                <Column sortable header='RESP' className='center' field='totaL_IN_RESP' />\r\n                <Column sortable header='ECMO' className='center' field='totaL_IN_ECMO' />\r\n                <Column sortable header='NEW IN' className='center' field='neW_IN' />\r\n                <Column sortable header='NEW OUT' className='center' field='neW_OUT' />\r\n            </Grid>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Hospitalisations;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Column } from 'react-digital-grid';\r\nimport { Form, Col } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { _data } from '../scripts/all';\r\nimport moment from 'moment';\r\n\r\nconst Mortality = () => {\r\n\r\n    const[ gridProps, setGridProps ] = useState({ \r\n        data: [],\r\n        loading: true,\r\n        pageNr: 1,\r\n        pageSize: 10,\r\n        orderBy: 'date',\r\n        orderDir: 'DESC'\r\n    });\r\n\r\n    // filter data\r\n    const [ regions, setRegions ] = useState([]);\r\n    const [ ageGroups, setAgeGroups ] = useState([]);\r\n    const [ sexes, setSexes ] = useState([]);\r\n    \r\n    // filter values\r\n    const [ filterRegion, setFilterRegion] = useState([\"ALL\"])\r\n    const [ filterStartDate, setFilterStartDate ] = useState(\"\");\r\n    const [ filterEndDate, setFilterEndDate ] = useState(\"\");\r\n    const [ filterAgeGroup, setFilterAgeGroup ] = useState(\"ALL\");\r\n    const [ filterSex, setFilterSex ] = useState(\"ALL\");\r\n\r\n    const loadData = (pageSize, pageNr, orderBy, orderDir) => {\r\n        setGridProps(Object.assign(gridProps, { loading: true }));\r\n        _data.get(\r\n        {\r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetCasesDateMort`,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            filter: {\r\n                startDate: filterStartDate ? new moment(filterStartDate).format('YYYY-MM-DD') : '',\r\n                endDate: filterEndDate ? new moment(filterEndDate).format('YYYY-MM-DD') : '',\r\n                region: filterRegion,\r\n                ageGroup: filterAgeGroup,\r\n                sex: filterSex\r\n            },\r\n        }, (data, count) => {\r\n          setGridProps({\r\n            loading: false,\r\n            data: data,\r\n            dataCount: count,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            emptyPlaceholder: '-'\r\n          })\r\n        });\r\n      }\r\n    \r\n\r\n    useEffect(() => {\r\n        // set filter items\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateMort&field=region` }, (data) => setRegions(data));\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateMort&field=ageGroup` }, (data) => setAgeGroups(data));\r\n        _data.get({ url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetFilterData?type=CasesDateMort&field=sex` }, (data) => setSexes(data));\r\n\r\n        loadData(gridProps.pageSize, gridProps.pageNr, gridProps.orderBy, gridProps.orderDir);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterStartDate, filterEndDate, filterRegion, filterAgeGroup, filterSex ]);\r\n\r\n    return (\r\n        <>\r\n            <h1>Confirmed Cases - Mortality</h1>\r\n            <Form className=\"mb-3\">\r\n                <Form.Row>\r\n                    <Col>\r\n                        <DatePicker\r\n                            selectsStart\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"From Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterStartDate}\r\n                            onChange={date => setFilterStartDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                        <DatePicker\r\n                            selectsEnd\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"To Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterEndDate}\r\n                            onChange={date => setFilterEndDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Region\"\r\n                            onChange={(e) => { setFilterRegion(e.target.value); }}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Region</Form.Control>\r\n                            {\r\n                                regions.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Age Group\"\r\n                            onChange={(e) => setFilterAgeGroup(e.target.value)}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Age Group</Form.Control>\r\n                            {\r\n                                ageGroups.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                    <Form.Control \r\n                            as=\"select\"\r\n                            placeholder=\"Sex\"\r\n                            onChange={(e) => setFilterSex(e.target.value)}>\r\n                            <Form.Control as=\"option\" value=\"ALL\">Sex</Form.Control>\r\n                            {\r\n                                sexes.map(item => {\r\n                                    return <Form.Control as=\"option\" key={item} value={item}>{item}</Form.Control>\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col md={2}></Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Grid \r\n                { ...gridProps }\r\n                skin='bootstrap'\r\n                onStateChange={newState =>\r\n                    loadData(newState.pageSize, newState.pageNr, newState.orderBy, newState.orderDir)\r\n                }\r\n                > \r\n                <Column sortable header='Date' className='italic' field='date' />\r\n                <Column sortable header='Region' className='center bold' field='region' />\r\n                <Column sortable header='Age' className='center' field='agegroup' />\r\n                <Column sortable header='Sex' className='center' field='sex' />\r\n                <Column sortable header='Deaths' className='center' field='deaths' />\r\n            </Grid>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Mortality;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Column } from 'react-digital-grid';\r\nimport { Form, Col } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { _data } from '../scripts/all';\r\nimport moment from 'moment';\r\n\r\nconst CasesDateAgeSexProvince = () => {\r\n\r\n    const[ gridProps, setGridProps ] = useState({ \r\n        data: [],\r\n        loading: true,\r\n        pageNr: 1,\r\n        pageSize: 10,\r\n        orderBy: 'date',\r\n        orderDir: 'DESC'\r\n    });\r\n\r\n    // filter values\r\n    const [ filterStartDate, setFilterStartDate ] = useState(\"\");\r\n    const [ filterEndDate, setFilterEndDate ] = useState(\"\");\r\n\r\n    const loadData = (pageSize, pageNr, orderBy, orderDir) => {\r\n        setGridProps(Object.assign(gridProps, { loading: true }));\r\n        _data.get(\r\n        {\r\n            url: `${process.env.REACT_APP_API_ROOT_URL}/Stats/GetCasesDateTests`,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            filter: {\r\n                startDate: filterStartDate ? new moment(filterStartDate).format('YYYY-MM-DD') : '',\r\n                endDate: filterEndDate ? new moment(filterEndDate).format('YYYY-MM-DD') : '',\r\n            },\r\n        }, (data, count) => {\r\n          setGridProps({\r\n            loading: false,\r\n            data: data,\r\n            dataCount: count,\r\n            pageNr: pageNr,\r\n            pageSize: pageSize,\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n            emptyPlaceholder: '-'\r\n          })\r\n        });\r\n      }\r\n    \r\n\r\n    useEffect(() => {\r\n        loadData(gridProps.pageSize, gridProps.pageNr, gridProps.orderBy, gridProps.orderDir);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ filterStartDate, filterEndDate ]);   \r\n\r\n    return (\r\n        <>\r\n            <h1>Total Tests</h1>\r\n            <Form className=\"mb-3\">\r\n                <Form.Row>\r\n                    <Col>\r\n                        <DatePicker\r\n                            selectsStart\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"From Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterStartDate}\r\n                            onChange={date => setFilterStartDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col>\r\n                    <DatePicker\r\n                            selectsEnd\r\n                            startDate={filterStartDate}\r\n                            endDate={filterEndDate}\r\n                            placeholderText=\"To Date\"\r\n                            className=\"form-control\"\r\n                            selected={filterEndDate}\r\n                            onChange={date => setFilterEndDate(date)}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            isClearable\r\n                         />\r\n                    </Col>\r\n                    <Col md={8}></Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Grid \r\n                { ...gridProps }\r\n                skin='bootstrap'\r\n                onStateChange={newState =>\r\n                    loadData(newState.pageSize, newState.pageNr, newState.orderBy, newState.orderDir)\r\n                }\r\n                > \r\n                <Column sortable header='Date' className='italic' field='date' />\r\n                <Column sortable header='Tests' className='center' field='tests' />\r\n            </Grid>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default CasesDateAgeSexProvince;","import React from 'react';\nimport './styles/App.css';\nimport { Container, Row, Col, Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\nimport PageLink from './components/common/pageLink';\nimport NotFound from './components/common/notFound';\nimport PageRedirect from './components/common/pageRedirect';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport CasesDateAgeSexProvince from './components/CasesDateAgeSexProvince'\nimport CasesDateMunicipality from './components/CasesDateMunicipality'\nimport CasesDateMunicipalityCum from './components/CasesDateMunicipalityCum'\nimport Hospitalisations from './components/Hospitalisations'\nimport Mortality from './components/Mortality'\nimport Tests from './components/Tests'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUsers, faMapMarked, faMap, faUserNurse, faSkullCrossbones, faVial } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  return (\n    <Container className=\"app\">\n      <Row>\n        <Col className=\"p-0\">\n          <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand href=\"/\">\n              <img src=\"images/be_flag.png\" width=\"40\" className=\"mr-2\" alt=\"Belgium\" />\n              Covid-19 - Belgium Stats\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <NavDropdown title=\"Confirmed cases\" id=\"basic-nav-dropdown\">\n                  <PageLink className=\"dropdown-item\" to={`/cases_date_asp`}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={ faUsers } />\n                    By Date, Age, Sex and Province\n                  </PageLink>\n                  <PageLink className=\"dropdown-item\" to={`/cases_date_mun`}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={ faMapMarked } />\n                    By Date and Municipality\n                  </PageLink>\n                  <NavDropdown.Divider />\n                  <PageLink className=\"dropdown-item\" to={`/cases_cum_mun`}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={ faMap } />\n                    Cumulative by municipality\n                  </PageLink>\n                </NavDropdown>\n                <PageLink className=\"nav-link\" to={`/hosp`}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={ faUserNurse } />\n                    Hospitalisations\n                </PageLink>\n                <PageLink className=\"nav-link\" to={`/mortality`}>\n                  <FontAwesomeIcon className=\"mr-2\" icon={ faSkullCrossbones } />\n                  Mortality\n                </PageLink>\n                <PageLink className=\"nav-link\" to={`/tests`}>\n                  <FontAwesomeIcon className=\"mr-2\" icon={ faVial } />\n                  Tests\n                </PageLink>\n              </Nav>\n              <Form inline hidden>\n                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                <Button variant=\"outline-success\">Search</Button>\n              </Form>\n            </Navbar.Collapse>\n          </Navbar>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"py-4\">\n          <Switch>\n            <Route path={`/`} exact component={Home} />\n            <Route path={`/cases_date_asp`} component={CasesDateAgeSexProvince} />\n            <Route path={`/cases_date_mun`} component={CasesDateMunicipality} />\n            <Route path={`/cases_cum_mun`} component={CasesDateMunicipalityCum} />\n            <Route path={`/hosp`} component={Hospitalisations} />\n            <Route path={`/mortality`} component={Mortality} />\n            <Route path={`/tests`} component={Tests} />\n            <Route path={`/not-found`} component={NotFound} />\n            <PageRedirect to={`/not-found`} />\n          </Switch>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"footer\">\n          Source of data: <a href=\"https://epistat.wiv-isp.be/Covid/\" target=\"_balnk\">https://epistat.wiv-isp.be/Covid/</a> | Source code: <a href=\"https://github.com/miscalencu/Covid-Stats-Belgium\" taget=\"_blank\">https://github.com/miscalencu/Covid-Stats-Belgium</a>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter, BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n// use HashRouter to host in GitHub pages. \n// BrowserRouter are not supported here\n\nconst useHash = process.env.REACT_APP_ROUTER_TYPE === \"hash\";\nconst Router = useHash ? HashRouter : BrowserRouter;\n\nReactDOM.render(\n  <Router basename={`${process.env.PUBLIC_URL}/`}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}